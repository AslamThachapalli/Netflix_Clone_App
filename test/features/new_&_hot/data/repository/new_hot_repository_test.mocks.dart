// Mocks generated by Mockito 5.3.2 from annotations
// in netflix_clone/test/features/new_&_hot/data/repository/new_hot_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:netflix_clone/features/new_&_hot/data/datasources/get_coming_soon_data.dart'
    as _i4;
import 'package:netflix_clone/features/new_&_hot/data/datasources/get_everyones_watching_data.dart'
    as _i6;
import 'package:netflix_clone/features/new_&_hot/data/models/coming_soon_dto.dart'
    as _i2;
import 'package:netflix_clone/features/new_&_hot/data/models/everyones_watching_dto.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeComingSoonDto_0 extends _i1.SmartFake implements _i2.ComingSoonDto {
  _FakeComingSoonDto_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEveryOnesWatchingDto_1 extends _i1.SmartFake
    implements _i3.EveryOnesWatchingDto {
  _FakeEveryOnesWatchingDto_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetComingSoonData].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetComingSoonData extends _i1.Mock implements _i4.GetComingSoonData {
  MockGetComingSoonData() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.ComingSoonDto> getComingSoonData(int? page) =>
      (super.noSuchMethod(
        Invocation.method(
          #getComingSoonData,
          [page],
        ),
        returnValue: _i5.Future<_i2.ComingSoonDto>.value(_FakeComingSoonDto_0(
          this,
          Invocation.method(
            #getComingSoonData,
            [page],
          ),
        )),
      ) as _i5.Future<_i2.ComingSoonDto>);
}

/// A class which mocks [GetEveryOnesWatchingData].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetEveryOnesWatchingData extends _i1.Mock
    implements _i6.GetEveryOnesWatchingData {
  MockGetEveryOnesWatchingData() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.EveryOnesWatchingDto> getEveryOnesWatchingData(int? page) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEveryOnesWatchingData,
          [page],
        ),
        returnValue: _i5.Future<_i3.EveryOnesWatchingDto>.value(
            _FakeEveryOnesWatchingDto_1(
          this,
          Invocation.method(
            #getEveryOnesWatchingData,
            [page],
          ),
        )),
      ) as _i5.Future<_i3.EveryOnesWatchingDto>);
}
